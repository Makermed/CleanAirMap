import { ApolloServer, GraphQLResponse } from "@apollo/server";
import { schema } from "../schema";
import { Context } from "../context"
import { TestAdaptor } from "../../dataAccess/adaptors/testAdaptor/adaptor";
import { LocationModel, RoomModel, LocationModelInput } from "../../dataAccess/dataTypes";
import { NexusGenInputs } from "../../../nexus-typegen";
import assert from 'assert';

const testServer = new ApolloServer<Context>({schema})

const testContext = {
    db: new TestAdaptor()
}

function mockSingleLocation() : Promise<LocationModel | null> {
    const location : LocationModel = {
        locationId: 1,
        name: 'Location 1',
        feature_type: 'poi',
        full_address: '123 Main St, AnyTown, StateProv, H0H0H0, Any Nation',
        geometry: { coordinates: [30,40.32908] },
        created_id: 1,
        created_at: new Date("2023-01-01")

    }
    return Promise.resolve(location)
}

function mockMultipleLocations() : Promise<LocationModel[] | null> {
  // generated by faker.js
  let locations: LocationModel[] = [{ locationId: 0, name: "Medhurst - Rau", feature_type: "poi", full_address: "685 Mueller Pines, South Eli, Saskatchewan, AX", geometry: { coordinates: [166.9186, -40.9219] }, created_id: 1, created_at: new Date("2022-10-07T21:53:43.633Z") }, { "locationId": 1, name: "Zieme - Reichel", feature_type: "poi", full_address: "113 Feil Cliffs, East Gilbert, Newfoundland and Labrador, NO", geometry: { coordinates: [-37.1637, 78.3971] }, created_id: 1, created_at: new Date("2023-01-29T08:04:08.914Z") }, { "locationId": 2, name: "Denesik - Balistreri", feature_type: "poi", full_address: "594 Helen Gateway, East   Connor, Prince Edward Island, MV", geometry: { coordinates: [-136.8178, -36.0622] }, created_id: 1, created_at: new Date("2022-12-21T04:16:55.300Z") }, { "locationId": 3, name: "Bernier - Quigley", feature_type: "poi", full_address: "315 Kertzmann Turnpike, East Alizeberg, New Brunswick, AU", geometry: { coordinates: [-146.3215, -10.6542] }, created_id: 1, created_at: new Date("2023-05-23T05:18:37.705Z") }, { "locationId": 4, name: "Tromp, Lockman and D'Amore", feature_type: "poi", full_address: "876 Emmerich Coves, Dorval, Alberta, PE", geometry: { coordinates: [-88.9264, 72.5722] }, created_id: 1, created_at: new Date("2022-11-14T09:32:51.352Z") }, { "locationId": 5, name: "Bednar Group", feature_type: "poi", full_address: "239 Borer Parkways, Port Fidel, Northwest Territories, KR", geometry: { coordinates: [-73.1518, 88.3478] }, created_id: 1, created_at: new Date("2022-05-18T00:52:33.174Z") }];

  return Promise.resolve(locations)
}

function mockSingleLocationRooms() : Promise<RoomModel[] | null> {
  const rooms : RoomModel[] = [{
    roomId : 1,
    locationId: 1,
    name: 'L1 Room 1',
    created_id: 1,
    created_at: new Date("2023-01-01")
  },{
    roomId : 2,
    locationId: 1,
    name: 'L1 Room 2',
    created_id: 1,
    created_at: new Date("2023-01-01")
  },{
    roomId : 3,
    locationId: 1,
    name: 'L1 Room 3',
    created_id: 1,
    created_at: new Date("2023-01-01")
  },]
  return Promise.resolve(rooms)
}

async function mockCreate(locIn: LocationModelInput) : Promise<LocationModel | null> {
  let out : LocationModel | null = await mockSingleLocation();
  if (out != null) {
    Object.assign(out, locIn)

    out.created_at = new Date('2023-01-05');
    out.created_id = 5;
  }

  return out;
}

describe("locations query field", () => {
  it('fetches a single location, no rooms', async() => {
    testContext.db.locationDAO.getById = jest.fn().mockReturnValueOnce(mockSingleLocation())

    const { body } : GraphQLResponse<Record<string,unknown>> = await testServer.executeOperation(
        {
            query: LOCATION_NO_ROOMS_QUERY,
            variables: { locationId: 1}
        },
        {
            contextValue: testContext
        }
    );

    assert(body.kind === 'single');
    expect(body.singleResult.errors).toBeUndefined();
    expect(body.singleResult.data).not.toBeNull();
    expect(body.singleResult.data?.locations).toMatchSnapshot();
  })

  it('fetches a single location\'s rooms', async() => {
    testContext.db.locationDAO.getById = jest.fn().mockReturnValueOnce(mockSingleLocation())
    testContext.db.locationDAO.getRooms = jest.fn().mockReturnValueOnce(mockSingleLocationRooms())

    const { body } = await testServer.executeOperation(
        {
            query: SINGLE_LOCATION_WITH_ROOMS_QUERY,
            variables: { locationId: 1}
        },
        {
            contextValue: testContext
        }
    )

    assert(body.kind === 'single');
    expect(body.singleResult.errors).toBeUndefined();
    expect(body.singleResult.data).not.toBeNull();
    expect(body.singleResult.data?.locations).toMatchSnapshot();
  })

  it('fetches multiple locations', async() => {
    testContext.db.locationDAO.getMany = jest.fn().mockReturnValueOnce(mockMultipleLocations())

    const { body } = await testServer.executeOperation(
        {
            query: LOCATION_NO_ROOMS_QUERY,
            variables: { locationId: null }
        },
        {
            contextValue: testContext
        }
    )

    assert(body.kind === 'single');
    expect(body.singleResult.errors).toBeUndefined();
    expect(body.singleResult.data).not.toBeNull();
    expect(body.singleResult.data?.locations).toMatchSnapshot();
  })

  it('stores a new location' , async () => {
    testContext.db.locationDAO.create = jest.fn().mockImplementationOnce(mockCreate);

    const locationIn : NexusGenInputs["LocationInputType"] = {
      type: 'Feature',
      geometry: { coordinates: [-86.9259644,43.4708553] },
      properties: {
        name: 'Create location test',
        feature_type: 'poi',
        full_address: '567 Kings Boul., SomePlace, Ontario, M4G 2E5, Canada'
      }
    };

    const { body } = await testServer.executeOperation(
      {
          query: CREATE_ONLY_LOCATION_QUERY,
          variables: { data: locationIn }
      },
      {
          contextValue: testContext
      }
    );

    assert(body.kind === 'single');
    expect(body.singleResult.errors).toBeUndefined();
    expect(body.singleResult.data).not.toBeNull();
    expect(body.singleResult.data?.createLocation).toMatchSnapshot();
  })
});

const LOCATION_NO_ROOMS_QUERY =
`query Locations($locationId: Int) {
  locations(locationId: $locationId) {
    type
    id
    geometry
    properties {
      name
      full_address
      feature_type
    }
  }
}`

const SINGLE_LOCATION_WITH_ROOMS_QUERY =
`query Locations($locationId: Int) {
  locations(locationId: $locationId) {
    id
    properties {
      name
    }
    rooms {
      roomId
      locationId
      name
      created_id
      created_at
    }
  }
}`

const CREATE_ONLY_LOCATION_QUERY =
`mutation CreateLocation($data: LocationInputType!) {
  createLocation(data: $data) {
    type
    id
    geometry
    properties {
      feature_type
      full_address
      name
    }
  }
}`