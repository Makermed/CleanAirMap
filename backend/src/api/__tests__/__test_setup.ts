import { IDataAdaptor } from "../../dataAccess/IDataAdaptor";
import { LocationModel, RoomModel, LocationModelInput } from "../../dataAccess/dataTypes";

export function mockLocationDAO(testAdaptor : IDataAdaptor) {
    testAdaptor.locationDAO.getById = jest.fn().mockReturnValue(mockSingleLocation());
    testAdaptor.locationDAO.create = jest.fn().mockImplementation(mockCreate);
    testAdaptor.locationDAO.getMany = jest.fn().mockReturnValue(mockMultipleLocations());
    testAdaptor.locationDAO.getRooms = jest.fn().mockReturnValue(mockSingleLocationRooms());
}

function mockSingleLocation() : Promise<LocationModel | null> {
    const location : LocationModel = {
        locationId: 1,
        name: 'Location 1',
        feature_type: 'poi',
        full_address: '123 Main St, AnyTown, StateProv, H0H0H0, Any Nation',
        geometry: { coordinates: [30,40.32908] },
        created_id: 1,
        created_at: new Date("2023-01-01")

    }
    return Promise.resolve(location)
}

function mockMultipleLocations() : Promise<LocationModel[] | null> {
  // generated by faker.js
  let locations: LocationModel[] = [{ locationId: 0, name: "Medhurst - Rau", feature_type: "poi", full_address: "685 Mueller Pines, South Eli, Saskatchewan, AX", geometry: { coordinates: [166.9186, -40.9219] }, created_id: 1, created_at: new Date("2022-10-07T21:53:43.633Z") }, { "locationId": 1, name: "Zieme - Reichel", feature_type: "poi", full_address: "113 Feil Cliffs, East Gilbert, Newfoundland and Labrador, NO", geometry: { coordinates: [-37.1637, 78.3971] }, created_id: 1, created_at: new Date("2023-01-29T08:04:08.914Z") }, { "locationId": 2, name: "Denesik - Balistreri", feature_type: "poi", full_address: "594 Helen Gateway, East   Connor, Prince Edward Island, MV", geometry: { coordinates: [-136.8178, -36.0622] }, created_id: 1, created_at: new Date("2022-12-21T04:16:55.300Z") }, { "locationId": 3, name: "Bernier - Quigley", feature_type: "poi", full_address: "315 Kertzmann Turnpike, East Alizeberg, New Brunswick, AU", geometry: { coordinates: [-146.3215, -10.6542] }, created_id: 1, created_at: new Date("2023-05-23T05:18:37.705Z") }, { "locationId": 4, name: "Tromp, Lockman and D'Amore", feature_type: "poi", full_address: "876 Emmerich Coves, Dorval, Alberta, PE", geometry: { coordinates: [-88.9264, 72.5722] }, created_id: 1, created_at: new Date("2022-11-14T09:32:51.352Z") }, { "locationId": 5, name: "Bednar Group", feature_type: "poi", full_address: "239 Borer Parkways, Port Fidel, Northwest Territories, KR", geometry: { coordinates: [-73.1518, 88.3478] }, created_id: 1, created_at: new Date("2022-05-18T00:52:33.174Z") }];

  return Promise.resolve(locations)
}

function mockSingleLocationRooms() : Promise<RoomModel[] | null> {
  const rooms : RoomModel[] = [{
    roomId : 1,
    locationId: 1,
    name: 'L1 Room 1',
    created_id: 1,
    created_at: new Date("2023-01-01")
  },{
    roomId : 2,
    locationId: 1,
    name: 'L1 Room 2',
    created_id: 1,
    created_at: new Date("2023-01-01")
  },{
    roomId : 3,
    locationId: 1,
    name: 'L1 Room 3',
    created_id: 1,
    created_at: new Date("2023-01-01")
  },]
  return Promise.resolve(rooms)
}

async function mockCreate(locIn: LocationModelInput) : Promise<LocationModel | null> {
  let out : LocationModel | null = await mockSingleLocation();
  if (out != null) {
    Object.assign(out, locIn)

    out.created_at = new Date('2023-01-05');
    out.created_id = 5;
  }

  return out;
}