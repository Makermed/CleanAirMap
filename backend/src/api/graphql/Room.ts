import { objectType, extendType, arg, floatArg, stringArg, nonNull, intArg } from 'nexus'

export const Room = objectType({
    name: 'Room',
    sourceType: 'RoomModel',
    definition(t) {
        t.int('roomId'),
        t.int('locationId'),
        t.string('name'),
        t.int('created_id'),
        t.datetime('created_at')
    },
})

export const RoomQuery = extendType({
    type: 'Query',
    definition(t) {
        t.list.field('rooms', {
            type: 'Room',
            args: { roomId: intArg() },
            async resolve(_root, _args, ctx) {
                if (_args == null || _args.roomId == null) {
                return ctx.db.roomDAO.getMany();
            }
                if (_args != null && _args.roomId != null) {
                    const single = await ctx.db.roomDAO.getById(_args.roomId);
                    return [ single ] ;
                }
                return null;
            }
        })
    },
})

export const RoomMutation = extendType({
    type: 'Mutation',
    definition(t) {
        t.field('createRoom', {
            type: 'Room',
            args: {
                name: nonNull(stringArg()),
                locationId: nonNull(intArg()),
            },
            async resolve(_root, args, ctx) {
                const room  = {
                    name: args.name,
                    locationId: args.locationId,
                    created_id: 1
                }
                //@ts-ignore: missing ID is okay, as it will be autogenerated
                //TODO: perhaps create a NewRoom type with no ID
                const newRoom = await ctx.db.roomDAO.create( room )
                return newRoom
            }
        })
    }
})